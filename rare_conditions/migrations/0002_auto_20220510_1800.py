# Generated by Django 4.0.4 on 2022-05-10 16:04
from datetime import datetime
from collections import defaultdict

from django.db import migrations
import xml.etree.ElementTree as ET

def etree_to_dict(t):
# borrowed from 
# https://stackoverflow.com/questions/2148119/how-to-convert-an-xml-string-to-a-dictionary
    d = {t.tag: {} if t.attrib else None}
    children = list(t)
    if children:
        dd = defaultdict(list)
        for dc in map(etree_to_dict, children):
            for k, v in dc.items():
                dd[k].append(v)
        d = {t.tag: {k:v[0] if len(v) == 1 else v for k, v in dd.items()}}
    if t.attrib:
        d[t.tag].update(('@' + k, v) for k, v in t.attrib.items())
    if t.text:
        text = t.text.strip()
        if children or t.attrib:
            if text:
              d[t.tag]['#text'] = text
        else:
            d[t.tag] = text
    return d

def build_disorders_and_symptoms(apps, schema_editor):
    tree = ET.parse('rare_conditions/_data/symptom_map.xml')
    root = tree.getroot()
    hpo_dict = etree_to_dict(root)

    disorder_status_list = hpo_dict["JDBOR"]['HPODisorderSetStatusList']['HPODisorderSetStatus']

    Disease = apps.get_model('rare_conditions', 'Disease')
    Symptom = apps.get_model('rare_conditions', 'Symptom')
    SymptomFreqs = apps.get_model('rare_conditions', 'SymptomFreqs')
    # @TODO move this to constant
    freq_map = {
                "Excluded (0%)": 0,
                "Very rare (<4-1%)": 1,
                "Occasional (29-5%)": 2,
                "Frequent (79-30%)": 3,
                "Very frequent (99-80%)": 4,
                "Obligate (100%)": 5,
               }

    #  takes ~4 minutes on 2020 MBP
    for disorder in disorder_status_list:
        curr_disorder = Disease(name=disorder['Disorder']['Name']['#text'],
                                disorder_id=disorder['Disorder']['@id'],
                                expert_link=disorder['Disorder']['ExpertLink']['#text'],
                                orpha_code=disorder['Disorder']['OrphaCode']
                                )

        curr_disorder.save()

        if int(disorder['Disorder']['HPODisorderAssociationList']['@count']) > 0:
            for symptom in disorder['Disorder']['HPODisorderAssociationList']['HPODisorderAssociation']:

                obj, _ = Symptom.objects.get_or_create(hpo_id=symptom['HPO']['HPOId'],
                                                       name=symptom['HPO']['HPOTerm']
                                                       )
                obj.diseases.add(curr_disorder)

                freq_idx = freq_map.get(symptom['HPOFrequency']['Name']['#text'])

                curr_sym_freq = SymptomFreqs(disorder_id=curr_disorder.disorder_id, hpo_id=symptom['HPO']['HPOId'], hpo_freq=freq_idx)
                curr_sym_freq.save()




class Migration(migrations.Migration):
    atomic = False
    dependencies = [
        ('rare_conditions', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(build_disorders_and_symptoms),
    ]
